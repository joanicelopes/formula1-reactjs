
Drivers.js

// TESTING
    /*useEffect(() => {
        const fetchItems = async () => {
            const result = await axios(`http://ergast.com/api/f1/current/drivers.json`)
            const driverData = result.data.MRData.DriverTable.Drivers
            const standings = await axios(`http://ergast.com/api/f1/current/driverStandings.json`)
            setDrivers(driverData)
            setIsLoading(false)
            console.log(drivers)
        }
        fetchItems()
    }, [])*/
    //---------------------------------------------------------------------------------------------------------------------------//
    /*useEffect(() => {
        const fetchItems = async () => {
            const response = await axios(`http://ergast.com/api/f1/current/driverStandings.json`)
            const result = response.data.MRData.StandingsTable.StandingsLists[0].DriverStandings
            const driverData = result.map((driver) => {
                return {
                    driverId: driver.Driver.driverId,
                    driverName: driver.Driver.givenName + ' ' + driver.Driver.familyName,
                    constructorName: driver.Constructors[0].name,
                    permanentNumber: driver.Driver.permanentNumber,
                }
            })
            setDrivers(result.map((ds) => ds.Driver));
            setStandings(driverData)
            setIsLoading(false)
            console.log(driverData)
        }
        fetchItems()
    }, [])*/

    -----------------------------------------------------------------------------------------------------
Home.js
     /* const convertTimeZone = (timeString) => {
        if (!timeString) {
            return ['', ''];
        }

        const today = new Date();
        const timeZone = today.getTimezoneOffset() / -60; // offset(minutes) / -60 = hours 
        let [hours, minutes, second] = timeString.split(':');

        if ((+hours + timeZone) % 24 < 10) {
            hours = '0' + (+hours + timeZone) % 24;
        } else {
            hours = +hours + timeZone;
        }

        return hours + ":" + minutes;
    }; */


        const upcomingRace = races.find((race) => race && new Date(race.date) > new Date());

    const DaysUntilRace = () => {
        /* if (upcomingRace) {
            const currentDate = dayjs();
            const raceDateTime = dayjs(`${upcomingRace.date} ${upcomingRace.time}`, 'YYYY-MM-DD HH:mm');

            const days = raceDateTime.diff(currentDate, 'days');
            const hours = raceDateTime.diff(currentDate, 'hours') % 24;
            const minutes = raceDateTime.diff(currentDate, 'minutes') % 60;

            return `${days} days, ${hours} hours, ${minutes} minutes`;
        }

        return null; */

        if (upcomingRace) {
            const raceDateTime = dayjs(`${upcomingRace.date} ${upcomingRace.time}`, 'YYYY-MM-DD HH:mm');
            return raceDateTime.fromNow();
        }
        
        return null;
    };

-----------------------------------------------------------------------------------------------
    <a href="/" className="site-title">
  <img src={logo} className="img-responsive" title="Home" alt="Home" />
</a>
<ul>
  <li>
    <a href="/drivers">Drivers</a>
  </li>
  <li>
    <a href="/constructors">Constructors</a>
  </li>
  <li>
    <a href="#">Standings</a>
    <ul className="nav-dropdown">
      <li>
        <a href="/driverstandings">Drivers</a>
      </li>
      <li>
        <a href="/constructorstandings">Constructors</a>
      </li>
    </ul>
  </li>
  <li>
    <a href="#">Races</a>
    <ul className="nav-dropdown">
      <li>
        <a href="/raceschedule">Race Schedule</a>
      </li>
      <li>
        <a href="/raceresults">Race Results</a>
      </li>
    </ul>
  </li>
</ul>

------------------------------NAVBAR BCKP CSS-------------------------------------------------------

.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 0.5rem;
    font-size: 0.7em;
    border-radius: 5px;
    background-color: #e10600;
}

.nav ul {
    list-style: none;
    display: flex;
}

.nav ul li {
    display: inline-block;
    position: relative;
    width: 10rem;
    text-align: center;
}

.nav ul li a {
    display: block;
    padding: 0.5rem 1rem;
    /* top | right | bottom | left */
    color: #fff;
    text-align: center;
    text-decoration: none;
    cursor: pointer;
}

.nav ul li ul.nav-dropdown li {
    display: block;
}

.nav ul li ul.nav-dropdown {
    width: 100%;
    background-color: #e10600;
    font-size: 0.6em;
    position: absolute;
    z-index: 999;
    display: none;
    border-radius: 5px;
}

.nav ul li button {
    padding: 0.5rem 1rem;
    background-color: #e10600;
    border: none;
    color: #fff;
    cursor: pointer;

}

.nav ul li a:hover {
    color: #cccccc;
}

.nav ul li:hover ul.nav-dropdown {
    display: block;
}


.nav {
    background-color: #e10600;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 0.5rem;
    font-size: 1em;
    border-radius: 5px;
}

.nav-items {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;
}

.nav-items button, 
.nav-items button a {
    background: none;
    border: none;
    color: white;
    padding: 1rem;
    text-decoration: none;
    cursor: pointer;
}

.nav-standings ul, 
.nav-races ul {
    position: absolute;
    background-color: white;
    width: 8rem;
    height: 4rem;
    display: flex;
    justify-content: space-around;
    align-items: flex-start;
    flex-direction: column;
    list-style: none;
    border-radius: 5px;
    font-size: 1rem;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.4s ease;
}

.nav-standings li,
.nav-races li {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

.nav-standings li:hover, 
.nav-races li:hover {
    background-color: #ea4030;
}

.nav-races ul {
    width: 10rem;
}

.nav-standings a, 
.nav-races a {
    color: #2d2d2d;
    text-decoration: none;
}

.nav-items button:hover {
    color: #cccccc;
}

.nav-standings button:focus + ul,
.nav-races button:focus + ul {
    opacity: 1;
    visibility: visible;
    transform: translateY(0px);
}*/

.img-responsive {
    margin: 0 auto;
    height: auto;
    width: auto;
    max-width: 80px;
    max-height: 80px;
}
